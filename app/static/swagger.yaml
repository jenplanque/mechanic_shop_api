swagger: '2.0'
info:
  title: 'Mechanic Shop API'
  description: 'API for a fictitious Mechanic Shop, built entirely from scratch.'
  version: '1.0.0'

host: 'mechanic-shop-api-1-ezx9.onrender.com'
schemes:
  - 'https'
consumes:
  - 'application/json'
produces:
  - 'application/json'

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

# ------------------------
paths:
  # ------------------------
  # Customer Paths
  # ------------------------
  /customers/login:
    post:
      tags: [Customers]
      summary: Customer Login (generates token)
      description: Validates customer credentials, generates and return a customer-specific token.
      parameters:
        - in: body
          name: body
          description: Login Credentials
          required: true
          schema:
            $ref: '#/definitions/LoginCredentials'
      responses:
        200:
          description: Customer Login Successful; Token returned
          schema:
            $ref: '#/definitions/LoginResponse'
          examples:
            application/json:
              token: your_jwt_token_here
              message: Login successful
              status: success

  /customers:
    post:
      tags: [Customers]
      summary: Endpoint to create/register a new customer
      description: 'Endpoint to create a new customer in our system, emails must be unique.'
      parameters:
        - in: body
          name: body
          description: Information required to create a new Customer
          required: true
          schema:
            $ref: '#/definitions/CreateCustomerPayload'
      responses:
        201:
          description: Customer created successfully
          schema:
            $ref: '#/definitions/CreateCustomerResponse'
          examples:
            application/json:
              id: 1
              name: John Doe
              email: jonnydoe@example.com
              password: securepassword

    get:
      tags: [Customers]
      summary: Returns list of all customers
      description: Endpoint to retrieve a list of all customers
      responses:
        200:
          description: Successfully retrieved customer list
          schema:
            $ref: '#/definitions/AllCustomers'
          examples:
            application/json:
              - id: 1
                name: John Doe
                email: jonnydoe@example.com
                password: securepassword

    put:
      tags: [Customers]
      summary: Update customer details (login required)
      description: Endpoint to update a customer; this is a token authenticated route, and the customer must be logged in to update their account.
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          description: Information required to update a Customer
          required: true
          schema:
            $ref: '#/definitions/UpdateCustomerPayload'
      responses:
        200:
          description: Successfully Updated Customer
          schema:
            $ref: '#/definitions/UpdateCustomerResponse'
          examples:
            application/json:
              id: 1
              name: John Doe Updated
              email: johnnydoe_updated@example.com
              phone: 123-456-7890
              password: newpassword123

    delete:
      tags: [Customers]
      summary: Delete Customer (login required)
      description: Endpoint to delete a customer; requires token authentication, customer must be logged in to delete their account.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successfully Deleted Customer
          schema:
            $ref: '#/definitions/DeleteCustomerResponse'
          examples:
            application/json:
              message: Customer <id> deleted successfully

  # ------------------------
  # Mechanic Paths
  # ------------------------
  /mechanics:
    post:
      tags: [Mechanics]
      summary: Add new mechanic
      description: Endpoint to create a new mechanic in our system, emails must be unique.
      parameters:
        - in: body
          name: body
          description: Information required to create a new Mechanic
          required: true
          schema:
            $ref: '#/definitions/CreateMechanicPayload'
      responses:
        201:
          description: Mechanic created successfully
          schema:
            $ref: '#/definitions/MechanicResponse'
          examples:
            application/json:
              email: jane.mechanic@example.com
              id: 1
              name: Jane Mechanic
              phone: 123-456-7890
              salary: 55000.00

    get:
      tags: [Mechanics]
      summary: Returns list of all mechanics
      description: Endpoint to retrieve a list of all mechanics.
      responses:
        200:
          description: Retrieved mechanic list successfully
          schema:
            $ref: '#/definitions/MechanicList'
          examples:
            application/json:
              - email: jane.mechanic@example.com
                id: 1
                name: Jane Mechanic
                phone: 123-456-7890
                salary: 50000.00

  /mechanics/{id}:
    get:
      tags: [Mechanics]
      summary: Get mechanic by ID
      description: Retrieve detailed information about a specific mechanic using their unique ID.
      parameters:
        - in: path
          name: id
          description: Mechanic's unique ID
          required: true
          type: integer
      responses:
        200:
          description: Mechanic found
          schema:
            $ref: '#/definitions/MechanicResponse'
          examples:
            application/json:
              email: jane.mechanic@example.com
              id: 1
              name: Jane Mechanic
              phone: 123-456-7890
              salary: '50000.00'

    put:
      tags: [Mechanics]
      summary: Update mechanic details
      description: Update details of an existing mechanic using their unique ID.
      parameters:
        - in: path
          name: id
          description: Mechanic's unique ID
          required: true
          type: integer
        - in: body
          name: body
          description: Information required to update a Mechanic
          required: true
          schema:
            $ref: '#/definitions/UpdateMechanicPayload'
      responses:
        200:
          description: Successfully Updated Mechanic
          schema:
            $ref: '#/definitions/MechanicResponse'
          examples:
            application/json:
              email: jane.mechanic@example.com
              id: 1
              name: Jane Mechanic
              phone: 123-456-7890
              salary: '50000.00'

    delete:
      tags: [Mechanics]
      summary: Delete Mechanic by ID
      description: Delete a mechanic from the system using their unique ID.
      parameters:
        - in: path
          name: id
          description: Mechanic's unique ID
          required: true
          type: integer
      responses:
        200:
          description: Successfully deleted Mechanic
          schema:
            $ref: '#/definitions/MechanicResponse'
          examples:
            application/json:
              message: Mechanic id <> deleted successfully

  /mechanics/search:
    get:
      tags: [Mechanics]
      summary: Search Mechanic by name
      description: Endpoint to search for a mechanic using their name.
      parameters:
        - in: query
          name: name
          description: Full or partial name of mechanic to search for
          type: string
          required: true
      responses:
        200:
          description: Search results
          schema:
            type: array
            items:
              $ref: '#/definitions/MechanicResponse'
          examples:
            application/json:
              email: jane.mechanic@example.com
              id: 1
              name: Jane Mechanic
              phone: 123-456-7890
              salary: '50000.00'

  /mechanics/usage:
    get:
      tags: [Mechanics]
      summary: Mechanic usage stats
      description: Returns statistics about mechanic usage, by frequency of service tickets assigned.
      responses:
        200:
          description: Mechanic usage stats returned
          examples:
            application/json:
              - mechanic_id: 1
                name: Jane Mechanic
                ticket_count: 5
              - mechanic_id: 2
                name: John Smith
                ticket_count: 3

  # ------------------------
  # Service Ticket Paths
  # ------------------------
  /service_tickets:
    post:
      tags: [Service Tickets]
      summary: Create service ticket
      description: Endpoint to create a new service ticket for a customer.
      parameters:
        - in: body
          name: body
          description: Information required to create a new Service Ticket
          required: true
          schema:
            $ref: '#/definitions/CreateServiceTicketPayload'
      responses:
        201:
          description: Successfully created service ticket
          schema:
            $ref: '#/definitions/ServiceTicketResponse'
          examples:
            application/json:
              VIN: '1HGCM82633A123456'
              customer:
                email: john.doe@example.com
                id: 1
                name: John Doe
                phone: '123-456-7890'
              customer_id: 1
              ticket_id: 4
              mechanics: []
              service_date: '2025-10-01'
              service_desc: 'Oil change and tire rotation'

    get:
      tags: [Service Tickets]
      summary: Get all service tickets
      description: Endpoint to retrieve a list of all service tickets.
      responses:
        200:
          description: Successfully retrieved Service Ticket list
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceTicketResponse'
          examples:
            application/json:
              - VIN: '1HGCM82633A123456'
                customer_info:
                  id: 1
                  name: John Doe
                  email: 'john.doe@example.com'
                  phone: '123-456-7890'
                ticket_id: 4
                mechanics: []
                service_date: '2025-10-01'
                service_desc: 'Oil change and tire rotation'

  /service_tickets/{id}:
    get:
      tags: [Service Tickets]
      summary: Get Service Ticket by ID
      description: Retrieve detailed information about a specific service ticket using its unique ID.
      parameters:
        - in: path
          name: id
          description: Service Ticket's unique ID
          required: true
          type: integer
      responses:
        200:
          description: Service Ticket details
          schema:
            $ref: '#/definitions/ServiceTicketResponse'
          examples:
            application/json:
              VIN: '1HGCM82633A123456'
              customer_info:
                email: 'john.doe@example.com'
                id: 1
                name: John Doe
                phone: 123-456-7890
              ticket_id: 4
              mechanics: []
              service_date: '2025-10-01'
              service_desc: 'Oil change and tire rotation'

  /service_tickets/{id}/edit:
    put:
      tags: [Service Tickets]
      summary: Update Service Ticket
      description: Add/Remove Mechanic and Inventory Item details of an existing service ticket using its unique ID.
      parameters:
        - in: path
          name: id
          description: Service Ticket's unique ID
          required: true
          type: integer
        - in: body
          name: body
          description: Information required to add/remove Mechanic(s) from a Service Ticket
          required: true
          schema:
            $ref: '#/definitions/UpdateServiceTicketPayload'
      responses:
        200:
          description: Service Ticket <id> updated successfully
          schema:
            $ref: '#/definitions/UpdateServiceTicketResponse'
          examples:
            application/json:
              service_ticket:
                VIN: '1HGCM82633A123456'
                customer_id: 3
                id: 4
                inventory_items:
                  - id: 1
                    name: Oil Filter
                    price: 19.99
                  - id: 2
                    name: Tire Rotation
                    price: 99.99
              mechanics:
                - id: 1
                  name: Jane Mechanic
              service_date: '2025-10-01'
              service_desc: 'Oil change and tire rotation'

  /service_tickets/my-tickets:
    get:
      tags: [Customers]
      summary: Get all service tickets for the logged-in customer
      description: Returns a list of service tickets that belong to the authenticated customer.
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of customer service tickets
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceTicketResponse'
        404:
          description: Customer not found

    delete:
      tags: [Service Tickets]
      summary: Delete Service ticket
      description: Delete service ticket using its unique ID.
      parameters:
        - in: path
          name: id
          description: Service Ticket's unique ID
          required: true
          type: integer
      responses:
        200:
          description: Successfully deleted Service Ticket
          examples:
            application/json:
              message: Service Ticket <id> deleted successfully

  # ------------------------
  # Inventory Paths
  # ------------------------
  /inventory:
    post:
      tags: [Inventory]
      summary: Add inventory item
      description: Endpoint to add a new inventory item/part to the system.
      parameters:
        - in: body
          name: body
          description: Information required to create a new Inventory Item
          required: true
          schema:
            $ref: '#/definitions/CreateInventoryItemPayload'
      responses:
        201:
          description: Successfully added inventory item
          schema:
            $ref: '#/definitions/InventoryItemResponse'
          examples:
            application/json:
              id: 1
              name: Oil Filter
              price: 19.99
        400:
          description: Duplicate item
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Item already exists in inventory.'

    get:
      tags: [Inventory]
      summary: Returns list of all inventory items
      description: Endpoint to retrieve a list of all inventory items.
      responses:
        200:
          description: Items retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/InventoryItemResponse'
            example:
              application/json:
                - id: 1
                  name: Oil Filter
                  price: 19.99
                - id: 2
                  name: Spark Plug
                  price: 5.49

  /inventory/{id}:
    get:
      tags: [Inventory]
      summary: Get inventory item by ID
      description: Retrieve detailed information about a specific inventory item using its unique ID.
      parameters:
        - in: path
          name: id
          description: Inventory item's unique ID
          required: true
          type: integer
      responses:
        200:
          description: Item found
          schema:
            $ref: '#/definitions/InventoryItemResponse'
          examples:
            application/json:
              id: 1
              name: Oil Filter
              price: 19.99
        404:
          description: Item not found
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Inventory item not found.'

    put:
      tags: [Inventory]
      summary: Update inventory item details
      description: Update an existing inventory item by its unique ID.
      parameters:
        - in: path
          name: id
          description: Inventory item's unique ID
          required: true
          type: integer
        - in: body
          name: body
          description: Information required to update an Inventory Item
          required: true
          schema:
            $ref: '#/definitions/UpdateInventoryItemPayload'
      responses:
        200:
          description: Item  details updated
          schema:
            $ref: '#/definitions/InventoryItemResponse'
          examples:
            application/json:
              id: 1
              name: Oil Filter
              price: 21.99
        404:
          description: Item not found
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Inventory item not found.'

    delete:
      tags: [Inventory]
      summary: Delete inventory item by ID
      description: Delete an inventory item using its unique ID.
      parameters:
        - in: path
          name: id
          description: Inventory item's unique ID
          required: true
          type: integer
      responses:
        200:
          description: Successfully deleted inventory item
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Inventory item <id> deleted successfully'
        404:
          description: Item not found
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Inventory item not found.'

# ------------------------
definitions:
  # ------------------------
  # Customer Definitions
  # ------------------------
  LoginCredentials:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    required: [email, password]

  LoginResponse:
    type: object
    properties:
      token:
        type: string
      message:
        type: string
      status:
        type: string

  CreateCustomerPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
    required: [name, email, phone, password]

  CreateCustomerResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string

  AllCustomers:
    type: array
    items:
      $ref: '#/definitions/CreateCustomerResponse'

  UpdateCustomerPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
    required: [name, email, phone, password]

  UpdateCustomerResponse:
    $ref: '#/definitions/CreateCustomerResponse'

  DeleteCustomerResponse:
    type: object
    properties:
      message:
        type: string

  # ------------------------
  # Mechanic Definitions
  # ------------------------
  CreateMechanicPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      salary:
        type: number
    required: [name, email, phone, salary]

  UpdateMechanicPayload:
    $ref: '#/definitions/CreateMechanicPayload'

  MechanicResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      salary:
        type: number

  MechanicUpdateResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string

  MechanicList:
    type: array
    items:
      $ref: '#/definitions/MechanicResponse'

  # ------------------------
  # Service Ticket Definitions
  # ------------------------
  CreateServiceTicketPayload:
    type: object
    properties:
      VIN:
        type: string
      service_date:
        type: string
        format: date
      service_desc:
        type: string
      customer_id:
        type: integer
    required: [VIN, service_date, service_desc, customer_id]

  ServiceTicketResponse:
    type: object
    properties:
      id:
        type: integer
      VIN:
        type: string
      service_date:
        type: string
      service_desc:
        type: string
      customer_id:
        type: integer
      mechanic_ids:
        type: array
        items:
          type: integer
      item_ids:
        type: array
        items:
          type: integer

  UpdateServiceTicketPayload:
    type: object
    properties:
      add_mechanic_ids:
        type: array
        items:
          type: integer
      remove_mechanic_ids:
        type: array
        items:
          type: integer
      add_item_ids:
        type: array
        items:
          type: integer
      remove_item_ids:
        type: array
        items:
          type: integer

  UpdateServiceTicketResponse:
    type: array
    properties:
      mechanics:
        type: integer

  CreateServiceTicketResponse:
    type: object
    properties:
      ticket_id:
        type: integer
      VIN:
        type: string
      customer_info:
        $ref: '#/definitions/CreateCustomerResponse'
      mechanics:
        type: array
        items:
          $ref: '#/definitions/MechanicResponse'
      service_date:
        type: string
        format: date
      service_desc:
        type: string

  # ------------------------
  # Inventory Definitions
  # ------------------------
  CreateInventoryItemPayload:
    type: object
    properties:
      name:
        type: string
      price:
        type: number
    required: [name, price]

  UpdateInventoryItemPayload:
    $ref: '#/definitions/CreateInventoryItemPayload'

  InventoryItemResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: number
